{"version":3,"sources":["logo.svg","api/Role.js","api/Event.js","ui/RoleEditor.js","ui/EventView.js","ui/MainView.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","RoleType","_ref$name","arguments","length","undefined","name","Object","classCallCheck","this","RoleInstance","role","vols","createClass","key","value","i","v","push","pop","Event","roles","days","title","types","_this","console","log","apoc_roles","forEach","r","type","find","x","shortref","R","count","number","n","RoleEditor","props","possibleConstructorReturn","getPrototypeOf","call","updateName","bind","assertThisInitialized","addVol","rmVol","copyVol","dayIdx","volIdx","data","update","splice","day","_this2","react_default","a","createElement","className","toConsumableArray","Array","map","u","Container","Col","editable","Row","Button","color","onClick","index_esm","I","InputGroup","Input","onChange","e","target","InputGroupAddon","addonType","React","PureComponent","EventView","state","handleTitleChange","handleDayChange","handleRoleChange","toggleEditable","setState","E","setDays","parseInt","min","max","step","Table","striped","RoleEditor_RoleEditor","Component","MainView","allTypes","templateTypes","currEvent","events","populateFLL","updateEvent","EVs","EventView_EventView","App","text","temp","JSON","parse","localStorage","getItem","Navbar","NavbarBrand","href","src","logo","alt","height","width","MainView_MainView","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a1f1b21d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ec018831.svg\";","export class RoleType {\r\n    constructor({name = \"Role\"}={}) {\r\n        this.name = name;\r\n    }\r\n}\r\n\r\nexport class RoleInstance {\r\n    constructor(role) {\r\n        this.role = role;\r\n        this.vols = [[\"Name 1\"],[\"Name 1\"],[\"Name 1\"],[\"Name 1\"],[\"Name 1\"]];\r\n    }\r\n\r\n    number(i,v) {\r\n        while (this.vols[i].length < v) {\r\n            this.vols[i].push(\"Name \"+(this.vols[i].length+1));\r\n        }\r\n        while (this.vols[i].length > v) {\r\n            this.vols[i].pop();\r\n        }\r\n    }\r\n}\r\n\r\n","import { RoleType, RoleInstance } from \"./Role\";\r\nimport { apoc_roles } from '../templates/apoc.json';\r\n\r\nexport default class Event {\r\n    constructor() {\r\n        this.roles = [];\r\n        this.days = 1;\r\n        this.title = \"FLL tournament\";\r\n    }\r\n\r\n    populateFLL(types) {\r\n        console.log(types);\r\n        this.days = 4;\r\n        this.title = \"Asia Pacific Open Championship\";\r\n        apoc_roles.forEach((r) => {\r\n            console.log(r);\r\n            let type = types.find(x => x.shortref === r.type);\r\n            if (type === undefined) type = new RoleType({name: r.type});\r\n            let R = new RoleInstance(type);\r\n            r.count.forEach((v,i) => {R.number(i,v)});\r\n            console.log(R);\r\n            this.roles.push(R);\r\n        });\r\n    }\r\n\r\n    setDays(n) {\r\n        this.days = n;\r\n    }\r\n}","import React from 'react';\r\n\r\nimport { Container, Col, Row, Button, Input, InputGroup, InputGroupAddon } from 'reactstrap';\r\n\r\nimport { FaUserPlus, FaUserMinus, FaClone } from 'react-icons/fa';\r\n\r\nexport default class RoleEditor extends React.PureComponent {\r\n    constructor (props) {\r\n        super(props);\r\n        this.updateName = this.updateName.bind(this);\r\n        this.addVol = this.addVol.bind(this);\r\n        this.rmVol = this.rmVol.bind(this);\r\n        this.copyVol = this.copyVol.bind(this);\r\n    }\r\n\r\n    updateName(name,dayIdx,volIdx) {\r\n        let R = this.props.data;\r\n        R.vols[dayIdx][volIdx] = name;\r\n        this.props.update(R);\r\n    }\r\n\r\n    rmVol(dayIdx, volIdx) {\r\n        let R = this.props.data;\r\n        if (R.vols[dayIdx].length > 1)\r\n            R.vols[dayIdx].splice(volIdx,1);\r\n        this.props.update(R);\r\n    }\r\n    copyVol(dayIdx, volIdx) {\r\n        let R = this.props.data;\r\n        R.vols.forEach(day => {\r\n            if (day.length-1 >= volIdx)\r\n                day[volIdx] = R.vols[dayIdx][volIdx];\r\n        });\r\n        this.props.update(R);\r\n    }\r\n\r\n    addVol(dayIdx) {\r\n        let R = this.props.data;\r\n        R.vols[dayIdx].push(\"\");\r\n        this.props.update(R);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <tr className=\"westli-row\">\r\n                <td><strong>{this.props.data.role.name}</strong></td>\r\n                {[...Array(this.props.days)].map((u,i) => {\r\n                    return (<td key={i}>\r\n                        <Container><Col>\r\n                            {this.props.editable && <Row><Button className=\"btn-sm\" color=\"success\" onClick={() => this.addVol(i)}><FaUserPlus/></Button></Row>}\r\n                            {this.props.data.vols[i].map((r,I) => {\r\n                                return (<Row key={I}>\r\n                                    <InputGroup>\r\n                                        <Input type=\"text\" value={r} onChange={(e) => {this.updateName(e.target.value,i,I)}}/>\r\n                                        { this.props.editable && (<InputGroupAddon addonType=\"append\">                                    \r\n                                            <Button className=\"btn-sm\"  color=\"danger\" onClick={() => this.rmVol(i,I)}><FaUserMinus/></Button>\r\n                                        </InputGroupAddon>) }\r\n                                        { this.props.editable && (<InputGroupAddon addonType=\"append\">                                    \r\n                                            <Button className=\"btn-sm\" color=\"info\" onClick={() => this.copyVol(i,I)}><FaClone/></Button>\r\n                                         </InputGroupAddon>) }\r\n                                    </InputGroup>\r\n                                </Row>)\r\n                            })}\r\n                            </Col></Container>\r\n                    </td>)\r\n                })}\r\n            </tr>\r\n        )\r\n    }\r\n    \r\n}","import React from 'react';\r\n\r\nimport RoleEditor from './RoleEditor';\r\n\r\nimport { Table, Input, InputGroup, InputGroupAddon, InputGroupText, Label, Button } from 'reactstrap';\r\n\r\nexport default class EventView extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        console.log(props); \r\n        \r\n        this.state = {\r\n            editable: true\r\n        }\r\n        this.handleTitleChange = this.handleTitleChange.bind(this);\r\n        this.handleDayChange = this.handleDayChange.bind(this);\r\n        this.handleRoleChange = this.handleRoleChange.bind(this);\r\n        this.toggleEditable = this.toggleEditable.bind(this);\r\n    }\r\n\r\n    toggleEditable() {\r\n        this.setState({editable: !this.state.editable});\r\n    }\r\n\r\n    handleTitleChange(e) {\r\n        let E = this.props.data;\r\n        E.title = e.target.value;\r\n        this.props.update(E);\r\n    }\r\n\r\n    handleDayChange(e) {\r\n        let E = this.props.data;\r\n        E.setDays(parseInt(e.target.value));\r\n        this.props.update(E);\r\n    }\r\n\r\n    handleRoleChange(i,r) {\r\n        let E = this.props.data;\r\n        E.roles[i] = r;\r\n        this.props.update(E);\r\n    }\r\n\r\n    render() {\r\n        console.log(this.props.data);\r\n        return (\r\n            <div>\r\n                <InputGroup>\r\n                    <Input type=\"text\" value={this.props.data.title} onChange={this.handleTitleChange}/>\r\n                    <Input type=\"number\" value={this.props.data.days} min={1} max={5} step={1} onChange={this.handleDayChange}/>\r\n                    <InputGroupAddon addonType=\"append\">days</InputGroupAddon>\r\n                    <Button color={this.state.editable?\"success\":\"danger\"} onClick={this.toggleEditable}>{this.state.editable ? \"Editable\" : \"Static\"}</Button>\r\n                </InputGroup>\r\n                <Table striped>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Role</th>\r\n                            {[...Array(this.props.data.days)].map((u,i) => {\r\n                                return <th key={i}>Day {i+1}</th>\r\n                            })}\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {this.props.data.roles.map((r,i) => { return (\r\n                            <RoleEditor key={i} editable={this.state.editable} data={r} days={this.props.data.days} update={(r) => {this.handleRoleChange(i,r)}}/>\r\n                        );})}\r\n                    </tbody>\r\n                </Table>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\n\r\nimport Event from '../api/Event';\r\nimport EventView from './EventView';\r\n\r\nimport { Container } from 'reactstrap';\r\nimport { templateTypes } from \"../templates/types.json\";\r\n\r\nexport default class MainView extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            allTypes: templateTypes,\r\n            currEvent: 0,\r\n            events: [new Event()]\r\n        }\r\n        this.state.events[0].populateFLL(this.state.allTypes);\r\n        this.updateEvent = this.updateEvent.bind(this);\r\n    }\r\n\r\n    updateEvent(E) {\r\n        let EVs = this.state.events;\r\n        EVs[this.state.currEvent] = E;\r\n        this.setState({events: EVs});\r\n    }\r\n        \r\n    render() {\r\n        return (\r\n        <Container>\r\n            <br/>\r\n            <EventView data={this.state.events[this.state.currEvent]} update={this.updateEvent}/>\r\n        </Container>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\n\r\nimport MainView from './ui/MainView';\r\n\r\nimport { Navbar, NavbarBrand } from 'reactstrap';\r\n\r\nfunction App() {\r\n  let data = {text: \"you\"};\r\n  let temp = JSON.parse(localStorage.getItem('test'));\r\n  if (temp == null) {\r\n    console.log(\"Undefined\");\r\n  } else {\r\n    data = temp;\r\n  }\r\n  console.log(data);\r\n\r\n  return (\r\n    <div className=\"App westli\">\r\n      <Navbar color=\"dark\">\r\n        <NavbarBrand href=\"/\"><img src={logo} alt=\"Westli\" height=\"30\" width=\"30\" /></NavbarBrand>\r\n      </Navbar>\r\n        <MainView/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport './fonts/stylesheet.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}